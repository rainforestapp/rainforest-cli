version: 2.1
orbs:
  win: circleci/windows@2.3.0

windows-param: &windows-param
  windows:
    description: Whether this is running on Windows
    type: boolean
    default: false

executors:
  mac:
    macos:
      xcode: 11.3.0
  linux:
    docker:
      - image: cimg/go:1.17.1-node
  windows: win/default

commands:
  install_go_darwin:
    description: "Install Go on Darwin"
    steps:
      - run:
          name: Install go
          command: |
            curl -L https://golang.org/dl/go1.17.1.darwin-amd64.tar.gz | tar zxf -
            echo "export PATH=$PATH:`pwd`/go/bin" >> $BASH_ENV
            source $BASH_ENV
            go version
  go_build:
    description: "go build, and output cli version"
    parameters:
      <<: *windows-param
    steps:
      - run:
          name: Build
          command: go build -o build/rainforest<<# parameters.windows >>.exe<</ parameters.windows >>
      - when:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Move executable
                command: |
                  Move-Item rainforest rainforest-dir
                  Move-Item build\./rainforest.exe .
            - run:
                name: Show CLI version
                command: ./rainforest.exe -v --skip-update
      - unless:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Move executable
                command: |
                  mv rainforest rainforest-dir
                  mv build/rainforest .
            - run:
                name: Show CLI version
                command: ./rainforest -v --skip-update

  pass:
    parameters:
      <<: *windows-param
    description: Start a run that will pass
    steps:
      - run:
          name: Start a run that will pass
          command: |
            ./rainforest<<# parameters.windows >>.exe<</ parameters.windows >> --skip-update run --run-group 9502

  pass_junit:
    parameters:
      <<: *windows-param
    description: Start a run that will pass, with junit
    steps:
      - run:
          name: Start a run that will pass, with junit
          command: |
            ./rainforest<<# parameters.windows >>.exe<</ parameters.windows >> --skip-update run --run-group 9502 --junit-file junit-pass.xml
      - store_test_results:
          path: junit-pass.xml

  pass_save_run_id:
    parameters:
      <<: *windows-param
    description: Start a run that will pass, saving the run ID
    steps:
      - when:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Start a run that will pass, saving the run ID
                command: |
                  ./rainforest.exe --skip-update run --run-group 9502 --save-run-id rf_run_id
                  Get-Content rf_run_id | Select-String -Pattern "^\d+$"
      - unless:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Start a run that will pass, saving the run ID
                command: |
                  ./rainforest --skip-update run --run-group 9502 --save-run-id rf_run_id
                  cat rf_run_id | grep -E "^[0-9]+$"
      - store_artifacts:
          path: rf_run_id

  fail:
    parameters:
      <<: *windows-param
    description: Start a run that will fail
    steps:
      - when:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Start a run that will fail
                command: |
                  ./rainforest.exe --skip-update run --run-group 9503
                  if ($LastExitCode -gt 0) {
                    echo "TESTING ::: Got the expected non-zero exit code."
                    exit 0
                  } else {
                    echo "TESTING ::: Got UNEXPECTED zero exit code."
                    exit 1
                  }
      - unless:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Start a run that will fail
                command: |
                  set +e
                  ./rainforest --skip-update run --run-group 9503
                  if [[ $? != 0 ]]; then
                    echo "TESTING ::: Got the expected non-zero exit code. âœ…"
                    echo 0
                  else
                    echo "TESTING ::: Got UNEXPECTED zero exit code. ðŸš¨"
                    echo 1
                  fi

  fail_junit:
    parameters:
      <<: *windows-param
    description: Start a run that will fail
    steps:
      - when:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Start a run that will fail
                command: |
                  ./rainforest.exe --skip-update run --run-group 9503 --junit-file junit-fail.xml
                  if ($LastExitCode -gt 0) {
                    echo "TESTING ::: Got the expected non-zero exit code."
                    exit 0
                  } else {
                    echo "TESTING ::: Got UNEXPECTED zero exit code."
                    exit 1
                  }
      - unless:
          condition: << parameters.windows >>
          steps:
            - run:
                name: Start a run that will fail, with junit
                command: |
                  set +e
                  ./rainforest --skip-update run --run-group 9503 --junit-file junit-fail.xml
                  if [[ $? != 0 ]]; then
                    echo "TESTING ::: Got the expected non-zero exit code. âœ…"
                    echo 0
                  else
                    echo "TESTING ::: Got UNEXPECTED zero exit code. ðŸš¨"
                    echo 1
                  fi
      - store_test_results:
          path: junit-fail.xml

jobs:
  validate_goreleaser_config:
    executor: linux
    steps:
      - checkout
      - run:
          name: Install GoReleaser
          command: go install github.com/goreleaser/goreleaser@latest
      - run:
          name: Check GoReleaser Config
          command: goreleaser check
  test:
    executor: linux
    steps:
      - checkout
      - run:
          name: Get Junit Reporter
          command: go install github.com/jstemmer/go-junit-report@latest
      - run:
          name: Run Unit Tests
          command: go test -v -race ./... 2>&1 | go-junit-report > report.xml
      - store_test_results:
          path: report.xml

  integration_test:
    parameters:
      platform:
        # type: string rather than executor; otherwise the conditions used below won't work
        # See https://discuss.circleci.com/t/condition-on-executor-type/39711
        type: string
      test:
        type: steps
    executor: << parameters.platform >>
    steps:
      - checkout
      - when:
          condition:
            equal: [ << parameters.platform >>,  mac ]
          steps:
            - install_go_darwin
      - when:
          condition:
            equal: [ << parameters.platform >>,  windows ]
          steps:
            - go_build:
                windows: true
      - unless:
          condition:
            equal: [ << parameters.platform >>,  windows ]
          steps:
            - go_build
      - steps: << parameters.test >>

  release:
    executor: linux
    steps:
      - checkout
      - run:
          name: Release via GoReleaser
          command: |
            export GITHUB_TOKEN=$GITHUB_ACCESS_TOKEN
            curl -sL https://git.io/goreleaser | bash
      - run:
          name: Show checksums
          command: cat dist/checksums.txt
      - store_artifacts:
          path: dist/checksums.txt

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
      - validate_goreleaser_config
      - integration_test:
          requires:
            - test
            - validate_goreleaser_config
          matrix:
            parameters:
              platform: [linux, mac]
              test:
                - [pass]
                - [pass_junit]
                - [pass_save_run_id]
                - [fail]
                - [fail_junit]
      - integration_test:
          requires:
            - test
            - validate_goreleaser_config
          matrix:
            parameters:
              platform: [windows]
              test:
                - [pass: { windows: true }]
                - [pass_junit: { windows: true }]
                - [pass_save_run_id: { windows: true }]
                - [fail: { windows: true }]
                - [fail_junit: { windows: true }]
      - release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
